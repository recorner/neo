// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SELLER
  BUYER
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  balance  Float  @default(0)
  userIcon        String?   // Add userIcon field
  md2faCodes      String[]  // Add md2faCodes field

  twoFactorSecret String?
  telegram        String?
  telegramId      String?   @unique // Telegram chat ID
  telegramLinked  Boolean   @default(false)

  createdAt DateTime @default(now())
  role      Role[]

  products Product[]

  topUps        TopUp[]
  orders        Order[]
  payouts       Payout[]
  announcements Announcement[]
  
  // Credit Card relationships
  sellerCards   CreditCard[] @relation("SellerCards")
  checkedCards  CreditCard[] @relation("CheckedCards")
  cardChecks    CardCheck[]  @relation("UserChecks")
  
  // Telegram session management
  telegramSessions TelegramSession[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  order Int @default(autoincrement())

  image String?

  products Product[]
}

enum ProductType {
  DOWNLOAD
  LICENSE
}

enum ProductTags {
  DELETED
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  shortDesc   String @default("")
  price       Float

  stock String @default("")

  type ProductType   @default(DOWNLOAD)
  tags ProductTags[] @default([])

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  seller User @relation(fields: [userId], references: [id])
  userId Int

  createdAt   DateTime    @default(now())
  cartEntries CartEntry[]
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  EXPIRED
  REFUNDED
}

model TopUp {
  id        Int     @id @default(autoincrement())
  amount    Float
  reference String  @unique
  completed Boolean @default(false)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
}

enum PayoutStatus {
  PENDING
  COMPLETED
  REJECTED
}

model Payout {
  id      Int    @id @default(autoincrement())
  amount  Float
  address String

  status         PayoutStatus @default(PENDING)
  rejectedReason String?

  createdAt DateTime  @default(now())
  paidAt    DateTime?

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model CartEntry {
  id       Int @id @default(autoincrement())
  quantity Int

  delivered String?

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?

  createdAt DateTime @default(now())
}

model Order {
  id     Int         @id @default(autoincrement())
  status OrderStatus @default(PENDING)

  buyer  User @relation(fields: [userId], references: [id])
  userId Int

  cart      CartEntry[]
  createdAt DateTime    @default(now())
}

model Settings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model Announcement {
  id    Int    @id @default(autoincrement())
  title String
  body  String

  createdAt DateTime @default(now())
  poster    User     @relation(fields: [userId], references: [id])
  userId    Int
}

// Credit Card Management System Models
enum CardStatus {
  UNCHECKED
  LIVE
  DEAD
}

model CreditCard {
  id          Int      @id @default(autoincrement())
  
  // Core card data
  cardNumber  String
  expMonth    String   // MM format
  expYear     String   // YY or YYYY format
  cvv         String
  
  // Cardholder Information
  fullName    String?
  firstName   String?
  lastName    String?
  
  // Address Information
  address     String?
  city        String?
  state       String?
  zip         String?
  country     String?
  
  // Additional Information
  phone       String?
  email       String?
  ssn         String?
  dob         String?  // Date of birth
  mmn         String?  // Mother's maiden name
  dl          String?  // Driver's license
  sortCode    String?
  atmPin      String?
  carrierPin  String?
  cardBalance String?
  userAgent   String?
  ip          String?
  
  // System Information
  price       Float    @default(0.0)
  isRefundable Boolean @default(false)
  isDiscounted Boolean @default(false)
  isChecked   Boolean  @default(false)
  status      CardStatus @default(UNCHECKED)
  
  // Relationships
  seller      User     @relation("SellerCards", fields: [sellerId], references: [id])
  sellerId    Int
  
  // Card checks
  checks      CardCheck[]
  
  // Tracking
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  checkedAt   DateTime?
  checkedBy   User?    @relation("CheckedCards", fields: [checkedById], references: [id])
  checkedById Int?
  
  // Indexing for performance
  @@index([cardNumber])
  @@index([zip])
  @@index([country])
  @@index([status])
  @@index([sellerId])
  @@index([price])
  @@index([isDiscounted])
}

model CardCheck {
  id        Int      @id @default(autoincrement())
  
  card      CreditCard @relation(fields: [cardId], references: [id])
  cardId    Int
  
  checker   User     @relation("UserChecks", fields: [checkerId], references: [id])
  checkerId Int
  
  result    CardStatus // LIVE or DEAD
  cost      Float    @default(0.5)
  
  createdAt DateTime @default(now())
  
  @@index([checkerId])
  @@index([cardId])
}

// Telegram Session Management
model TelegramSession {
  id        String   @id @default(uuid())
  chatId    String   
  sessionId String   @unique // Generated session identifier
  loginCode String?  // 6-digit login code
  isActive  Boolean  @default(true)
  expiresAt DateTime
  
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([chatId])
  @@index([sessionId])
  @@index([loginCode])
}
