generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  username         String            @unique
  password         String
  userIcon         String?
  md2faCodes       String[]
  createdAt        DateTime          @default(now())
  role             Role[]
  balance          Float             @default(0)
  twoFactorSecret  String?
  telegram         String?
  telegramId       String?           @unique
  telegramLinked   Boolean           @default(false)
  announcements    Announcement[]
  cardChecks       CardCheck[]       @relation("UserChecks")
  checkedCards     CreditCard[]      @relation("CheckedCards")
  sellerCards      CreditCard[]      @relation("SellerCards")
  orders           Order[]
  payouts          Payout[]
  products         Product[]
  telegramSessions TelegramSession[]
  topUps           TopUp[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  order    Int       @default(autoincrement())
  image    String?
  products Product[]
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  price       Float
  type        ProductType   @default(DOWNLOAD)
  tags        ProductTags[] @default([])
  categoryId  Int
  userId      Int
  createdAt   DateTime      @default(now())
  stock       String        @default("")
  shortDesc   String        @default("")
  cartEntries CartEntry[]
  category    Category      @relation(fields: [categoryId], references: [id])
  seller      User          @relation(fields: [userId], references: [id])
}

model TopUp {
  id                  Int                  @id @default(autoincrement())
  userId              Int
  amount              Float
  reference           String?              @unique
  completed           Boolean              @default(false)
  status              String               @default("pending")
  createdAt           DateTime             @default(now())
  paymentNotification PaymentNotification?
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("top_ups")
}

model Payout {
  id             Int          @id @default(autoincrement())
  amount         Float
  status         PayoutStatus @default(PENDING)
  rejectedReason String?
  userId         Int
  address        String
  createdAt      DateTime     @default(now())
  paidAt         DateTime?
  user           User         @relation(fields: [userId], references: [id])
}

model CartEntry {
  id        Int      @id @default(autoincrement())
  quantity  Int
  productId Int
  orderId   Int?
  delivered String?
  createdAt DateTime @default(now())
  order     Order?   @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id        Int         @id @default(autoincrement())
  status    OrderStatus @default(PENDING)
  userId    Int
  createdAt DateTime    @default(now())
  cart      CartEntry[]
  buyer     User        @relation(fields: [userId], references: [id])
}

model Settings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime @default(now())
  userId    Int
  poster    User     @relation(fields: [userId], references: [id])
}

model CreditCard {
  id           Int         @id @default(autoincrement())
  cardNumber   String
  expMonth     String
  expYear      String
  cvv          String
  fullName     String?
  firstName    String?
  lastName     String?
  address      String?
  city         String?
  state        String?
  zip          String?
  country      String?
  phone        String?
  email        String?
  ssn          String?
  dob          String?
  mmn          String?
  dl           String?
  sortCode     String?
  atmPin       String?
  carrierPin   String?
  cardBalance  String?
  userAgent    String?
  ip           String?
  price        Float       @default(0.0)
  isRefundable Boolean     @default(false)
  isDiscounted Boolean     @default(false)
  isChecked    Boolean     @default(false)
  status       CardStatus  @default(UNCHECKED)
  sellerId     Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  checkedAt    DateTime?
  checkedById  Int?
  checks       CardCheck[]
  checkedBy    User?       @relation("CheckedCards", fields: [checkedById], references: [id])
  seller       User        @relation("SellerCards", fields: [sellerId], references: [id])

  @@index([cardNumber])
  @@index([zip])
  @@index([country])
  @@index([status])
  @@index([sellerId])
  @@index([price])
  @@index([isDiscounted])
}

model CardCheck {
  id        Int        @id @default(autoincrement())
  cardId    Int
  checkerId Int
  result    CardStatus
  cost      Float      @default(0.5)
  createdAt DateTime   @default(now())
  card      CreditCard @relation(fields: [cardId], references: [id])
  checker   User       @relation("UserChecks", fields: [checkerId], references: [id])

  @@index([checkerId])
  @@index([cardId])
}

model TelegramSession {
  id        String   @id @default(uuid())
  chatId    String
  sessionId String   @unique
  loginCode String?
  isActive  Boolean  @default(true)
  expiresAt DateTime
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])

  @@index([chatId])
  @@index([sessionId])
  @@index([loginCode])
}

model PaymentNotification {
  id               Int       @id @default(autoincrement())
  topUpId          Int       @unique
  telegramUsername String?
  notificationSent Boolean   @default(false)
  sentAt           DateTime?
  createdAt        DateTime  @default(now())
  topUp            TopUp     @relation(fields: [topUpId], references: [id])

  @@index([telegramUsername])
  @@index([notificationSent])
}

enum Role {
  ADMIN
  SELLER
  BUYER
}

enum ProductType {
  DOWNLOAD
  LICENSE
}

enum ProductTags {
  DELETED
  ENROLL
  USA
  COOKIE
  SSN
  OTP
  ESIM
  DEVICE
  KYC
  CORPORATE
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  EXPIRED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  WAITING
  CONFIRMED
  FAILED
  EXPIRED
  REFUNDED
}

enum PayoutStatus {
  PENDING
  COMPLETED
  REJECTED
}

enum CardStatus {
  UNCHECKED
  LIVE
  DEAD
}
